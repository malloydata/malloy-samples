>>>markdown
# Name Analysis
This is a dataset of USA baby name popularity over time from the Social Security Administration. It's a simple dataset, but there are lots of interesting insights we can pull from it using Malloy.

The dataset is a single table with 5 columns:

* name - the name of the child
* gender - 'M' or 'F'
* year - the birth year of the child
* state - the state that the child was born in
* number - the number of children born with that name/gender/year/state
>>>markdown
## The semantic data model
In order to analyze this data, we're going to rename a couple of columns and build some reusable calculations.  `total_population` is a measure and can be used in an `aggregate:` calculation.  Decade is computed from year, and can be used in a `group_by:` or `select:`.  Click on 'Schema' to see the data that is provided.
>>>malloy
source: names is duckdb.table('usa_names.parquet') extend {
  rename: year_born is `year`   // 'year' is a reserved keyword in Malloy
  rename: population is `number`  // 'number' is a reserved keyword in Malloy

  measure:
    total_population is population.sum()

  dimension: 
    decade is floor(year_born/10)*10
}
>>>markdown
## How many people are in this dataset?
Using `aggregate:` we can make a computation that encompasses all the the data in the table.
>>>malloy
run: names-> {
  aggregate: total_population
}
>>>markdown
## What are the most common names and gender in this dataset?
To answer this question, the query below produces a table sorted by `total_population`. By default, Malloy sorts results in descending order by the first aggregate calculation.
>>>malloy
run: names-> {
  group_by: 
    name
    gender
  aggregate: 
    total_population
  limit: 10
}
>>>markdown
## What are the most common Female names in the dataset?
We can answer this by using the query above and addinga filter on gender.
>>>malloy
run: names-> {
  where: gender = 'F'
  group_by: 
    name
  aggregate: 
    total_population
  limit: 10
}
>>>markdown
## Population over time
Most transactional data sets include some notion of time.  We can produce a simple table by grouping by `decade`.  Notice that `decade` is a dimension declared in the source and not something in the table.
>>>malloy
run: names -> {
  group_by: decade
  aggregate: total_population
  order_by: decade
}
>>>markdown
## Change the view to a line chart.
By simply adding `# line_chart` above the query, we tag it to be rendered that way.  This line chart takes to columns as input, a time or number and another number.
>>>malloy
# line_chart
run: names -> {
  group_by: decade
  aggregate: total_population
  order_by: decade
}
>>>markdown
## Compare 'Linda' and 'Elizabeth' over decades
In a line chart, we can optionally have a third parameter is a dimension.  In this case it is 'Elizabeth' or 'Linda'
>>>malloy
# line_chart
run: names -> {
  where: name = 'Elizabeth' | 'Linda' 
  group_by: decade
  aggregate:
    total_population
  group_by: name
  order_by: decade
}
>>>markdown
## States.
Geography is also interesting.  Let's look at this data by state.
>>>malloy
run: names -> {
  group_by: state
  aggregate: total_population
}
>>>markdown
## Showing as a Map
Malloy show data on maps.  By tagging this query with `# shape_map` we can see the query above as a shape Map.
>>>malloy
# shape_map
run: names -> {
  group_by: state
  aggregate: total_population
}
>>>markdown
## Nesting - Compute the most popular names in each decade
One of the most powerful features of Malloy is nesting queryies.  The query below shows population by decade and for each decade, shows the top names.
>>>malloy
run: names -> {
  group_by: decade
  aggregate: total_population
  order_by: decade desc
  nest: top_names is {
    group_by: name, gender
    aggregate: total_population
    limit: 6
  }
}
>>>markdown
##  J names by decade and state
We can have as many nests as we like and we can change how each of the nested queries are rendered.
>>>malloy
run: names -> {
  where: name ~ 'J%'
  group_by: decade
  order_by: decade desc
  nest: top_names is {
    group_by: name
    aggregate: total_population
    limit: 6
  }
  # shape_map
  nest: by_state is {
    group_by: state
    aggregate: total_population
  }
  # line_chart 
  nest: by_year is {
    group_by: year_born
    aggregate: total_population
  }
}
>>>markdown
## Next Up: [Composing with Queries](names2.malloynb)