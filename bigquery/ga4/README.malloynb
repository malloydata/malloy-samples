>>>markdown
# Analyzing GA4 data with Malloy

This notebook builds a data model on the Google Analytics 4 export data in BigQuery. The GA4 data contains a single table, `events`, with quite a complex schema. Building a Malloy data model on top of this raw table makes it far easier to understand and  analyze. The cell below defines reusable dimensions and measures. Later on, we'll see side-by-side examples of queries in SQL vs. Malloy, and how much simpler they are in Malloy.

In the cell below, we define a source called `events`, and define some basic calculations on top of it. For example, we convert the `event_timestamp` column from "milliseconds since epoch" to an actual timestamp value. We also create some pre-defined aggregates such as `session_count`.
>>>malloy
source: events is table('bigquery:bigquery-public-data.ga4_obfuscated_sample_ecommerce.events_*') {

  rename:
    event_timestamp_raw is event_timestamp

  dimension:
    event_timestamp is timestamp_micros!timestamp(event_timestamp_raw)
    new_user is pick 1 when event_name ? 'first_visit' | 'first_open' else 0
    event_value is (event_params.value.int_value ?? event_params.value.float_value ?? event_params.value.double_value)

  measure:
    is_new_user is max(new_user)
    user_count is count(distinct user_pseudo_id)
    session_count is count(distinct event_params.value.int_value) { where: event_params.key = 'ga_session_id' }

  view: nested_index is {
    index: event_params.*, user_properties.*, items.*
  }
}
>>>markdown
For event tables, it's often the case that a lot of our queries only care about a specific type of event, such as purchases or conversion events. With Malloy, you can create a new `source` object based off of an already-existing `source` with the `extend` keyword. In the example below, we create the `purchase_events` source, which is the `events` source filtered down to just purchases.

In the GA4 dataset, purchase events have a revenue value associated with them that lives inside the `event_params` nested column. The logic to pull these values out is complicated and verbose. With Malloy, we can implement it a single time and reuse it anywhere, making it much easier for consumers of the model to analyze this dataset.
>>>malloy
source: purchase_events is events extend { 
  where: event_name = 'purchase' 

  measure:
    _total_spend_double is event_params.value.double_value.sum() { where: event_params.key = 'value' }
    _total_spend_float is event_params.value.float_value.sum() { where: event_params.key = 'value' }
    _total_spend_int is event_params.value.int_value.sum() { where: event_params.key = 'value' }

    total_spend is _total_spend_double + _total_spend_float + _total_spend_int
    purchase_count is count()

  dimension:
    item_of_interest is 'Google Navy Speckled Tee'

  view: by_day is {
    group_by: the_day is event_timestamp.day::date
    aggregate:
      total_spend
      purchase_count
  }

  view: by_country is {
    group_by: geo.country
    aggregate:
      total_spend
      purchase_count
  }

  view: by_year is {
    group_by: the_year is event_timestamp.year
    aggregate:
      total_spend
      purchase_count
  }
}
>>>markdown
## Sample Queries

Google provides some [sample SQL queries](https://developers.google.com/analytics/bigquery/basic-queries) to help you analyze the GA4 export in BigQuery.

Question 1: Count the unique events by date and event name for a specific period of days, and selected events.

SQL query:

```sql
SELECT
  event_date,
  event_name,
  COUNT(*) AS event_count
FROM
  `bigquery-public-data.ga4_obfuscated_sample_ecommerce.events_*`
WHERE
  event_name IN ('page_view', 'session_start', 'purchase')
  AND _TABLE_SUFFIX BETWEEN '20201201' AND '20201202'
GROUP BY 1, 2;
```

Malloy:
>>>malloy
run: events -> {
  group_by:
    event_date
    event_name

  aggregate:
    event_count is count()

  where:
    (event_name ? 'page_view' | 'session_start' | 'purchase')
    and event_timestamp.day ? @2020-12-01 to @2020-12-03
}
>>>markdown
Question 2: Get 'Total User' count and 'New User' count.

SQL query:

```sql
WITH
  UserInfo AS (
    SELECT
      user_pseudo_id,
      MAX(IF(event_name IN ('first_visit', 'first_open'), 1, 0)) AS is_new_user
    FROM `bigquery-public-data.ga4_obfuscated_sample_ecommerce.events_*`
    WHERE _TABLE_SUFFIX BETWEEN '20201101' AND '20201130'
    GROUP BY 1
  )
SELECT
  COUNT(*) AS user_count,
  SUM(is_new_user) AS new_user_count
FROM UserInfo;
```

Malloy:
>>>malloy
run: events -> {
  group_by: user_pseudo_id
  aggregate: is_new_user
  where: event_timestamp.day ? @2020-11-01 to @2020-12-01
} -> {
  aggregate:
    user_count is count()
    new_user_count is sum(is_new_user)
}
>>>markdown
Question 3: Get the total event values for all 'purchase' events

```sql
SELECT
  SUM(
    (
      SELECT COALESCE(value.int_value, value.float_value, value.double_value)
      FROM UNNEST(event_params)
      WHERE key = 'value'
    ))
    AS event_value
FROM
  `bigquery-public-data.ga4_obfuscated_sample_ecommerce.events_*`
WHERE
  event_name = 'purchase'
  AND _TABLE_SUFFIX BETWEEN '20201201' AND '20201202';
```

Malloy:
>>>malloy
run: purchase_events -> {
  aggregate:
    total_spend

  where:
    (event_timestamp.day ? @2020-12-01 to @2020-12-03)
}
>>>markdown
Question 4: Get the average amount of money spent per purchase session by user.

SQL:

```sql
SELECT
  user_pseudo_id,
  COUNT(
    DISTINCT(SELECT EP.value.int_value FROM UNNEST(event_params) AS EP WHERE key = 'ga_session_id'))
    AS session_count,
  AVG(
    (
      SELECT COALESCE(EP.value.int_value, EP.value.float_value, EP.value.double_value)
      FROM UNNEST(event_params) AS EP
      WHERE key = 'value'
    )) AS avg_spend_per_session_by_user,
FROM
  `bigquery-public-data.ga4_obfuscated_sample_ecommerce.events_*`
WHERE
  event_name = 'purchase'
  AND _TABLE_SUFFIX BETWEEN '20201101' AND '20210131'
GROUP BY
  1;
```

Malloy:
>>>malloy
run: purchase_events -> {
  group_by:
    user_pseudo_id

  aggregate:
    session_count
    avg_spend_per_session is total_spend / session_count

  where:
    event_timestamp.day ? @2020-11-01 to @2021-02-01

  order_by: 1
}
>>>markdown
More examples of SQL vs Malloy can be found in the `./sample_queries.malloy` file in this directory.